{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Beginning Python\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Section 2: String Manipulation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.1 Introduction to Strings"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.1.1 Single quotes vs double quotes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I \"really\" like chocolates\n",
      "I 'really' like chocolates\n",
      "I 'really' like chocolates\n",
      "I \"really\" like chocolates\n"
     ]
    }
   ],
   "source": [
    "single_quote_str  = 'Single Quotes'\n",
    "double_quote_str  = \"Double Quotes\"\n",
    "\n",
    "sentence1 = 'I \"really\" like chocolates'\n",
    "sentence2 = \"I 'really' like chocolates\"\n",
    "\n",
    "print(sentence1)\n",
    "print(sentence2)\n",
    "\n",
    "sentence1 = 'I \\'really\\' like chocolates'\n",
    "sentence2 = \"I \\\"really\\\" like chocolates\"\n",
    "\n",
    "print(sentence1)\n",
    "print(sentence2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.1.2 Triple Quotes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "This is\n",
      "a long paragraph\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'Triple quote strings are also comment blocks!\\n   They can spam multiple lines.'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paragraph = '''\n",
    "This is\n",
    "a long paragraph\n",
    "'''\n",
    "print(paragraph)\n",
    "\n",
    "'''Triple quote strings are also comment blocks!\n",
    "   They can spam multiple lines.'''\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.1.3 Comments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This is a single line comment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2 String Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.2.1 python string API "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "apples\n",
      "APPLES\n",
      "science\n",
      "Science\n"
     ]
    }
   ],
   "source": [
    "science = \"SCIENCE\"\n",
    "apple = \"apples\"\n",
    "print(apple)\n",
    "\n",
    "apple = apple.upper()\n",
    "\n",
    "print(apple)\n",
    "\n",
    "print(science.lower())\n",
    "\n",
    "print(science.title())\n",
    "# for more string functions refer to official documentation of python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "APPLE\n"
     ]
    }
   ],
   "source": [
    "apple = \"    apple        \"\n",
    "apple = apple.strip().upper()\n",
    "print(apple)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.3 Advanced String Manipulation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.3.1 String concatenation techniques & count & replace"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "python is anawesome language\n",
      "python is anawesome snake.\n"
     ]
    }
   ],
   "source": [
    "prefix = \"python is an\"\n",
    "suffix = \"awesome language\"\n",
    "\n",
    "astr = prefix + suffix\n",
    "\n",
    "print(astr)\n",
    "\n",
    "astr = astr.replace(\"language\",\"snake.\")\n",
    "\n",
    "print(astr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "python is anawesome snake.python is anawesome snake.\n"
     ]
    }
   ],
   "source": [
    "astr = astr * 2\n",
    "print(astr)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "python is anawesome languagepython is anawesome language\n"
     ]
    }
   ],
   "source": [
    "astr = astr.replace(\"snake.\",\"language\")\n",
    "print(astr)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "print(astr.count(\"an\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.4 String Formatting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.4.1 format method & numbers & strings & floating point numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "My number is 11\n",
      "My number is 1011\n"
     ]
    }
   ],
   "source": [
    "n = 11\n",
    "f = 1.2345678\n",
    "s = \"computer\"\n",
    "\n",
    "print(\"My number is {:d}\".format(n)) # in decimal printing\n",
    "print(\"My number is {:b}\".format(n)) # in binary format\n",
    "\n"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "There are many format types such as:\n",
    "e - exponents\n",
    "b - binary (base 2)\n",
    "o - octal (base 8)\n",
    "d - decimal (base 10)\n",
    "x - hexadecimal (base 16)\n",
    "f - floats (decimal numbers)\n",
    "s - strings (default if none is specified"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.234568\n",
      "1.235\n",
      "      1.235\n",
      "0000001.235\n"
     ]
    }
   ],
   "source": [
    "print(\"{:f}\".format(f))\n",
    "\n",
    "print(\"{:.3f}\".format(f)) #print 3 digits after decimal\n",
    "#padding\n",
    "print((\"{:11.3f}\").format(f))\n",
    "print((\"{:011.3f}\").format(f))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11 1.2345678 computer\n"
     ]
    }
   ],
   "source": [
    "print(\"{0} {1} {2}\".format(n,f,s))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "william own(s) 5000 of fruits\n"
     ]
    }
   ],
   "source": [
    "print(\"{name} own(s) {amount} of {object}\".format(\n",
    "name = \"william\",\n",
    "amount = 5000,\n",
    "object = \"fruits\"\n",
    "))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.5 User Input"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.5.1 Manipulating user input on the command line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please enter your first name:  william\n",
      "Please enter your middle name:  Alex\n",
      "Please enter your last name:  fiset\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "William A Fiset\n"
     ]
    }
   ],
   "source": [
    "#first_name,M.lastname\n",
    "\n",
    "first_name = str(input('Please enter your first name: '))\n",
    "middle_name = str(input('Please enter your middle name: '))\n",
    "last_name = str(input('Please enter your last name: '))\n",
    "\n",
    "first_name = first_name.capitalize()\n",
    "middle_name = middle_name.capitalize()\n",
    "last_name = last_name.capitalize()\n",
    "\n",
    "name_format = \"{first} {middle:.1s} {last}\"\n",
    "print(name_format.format(first=first_name, middle=middle_name, last=last_name))\n",
    "\n",
    "#Now run this in command line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
